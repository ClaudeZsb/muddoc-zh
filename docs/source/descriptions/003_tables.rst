表
======

**任何需要存储在合约状态中的数据都需要通过表来实现。**

**通过配置文件来定义和创建表。**

表的定义
----------

这是一份简单的配置文件，定义了一个名为 ``Users`` 的表，它有三个字段 ``addr`` 、 ``data`` 和 ``description`` ，
类型分别为 ``address`` 、 ``uint256`` 和 ``string`` ， 其中 ``addr`` 字段是主键。

.. code-block:: ts

  import { defineWorld } from "@latticexyz/world";

  export default defineWorld({
    namespace: "muddoc",
    tables: {
      Users: {
        schema: {
          addr: "address",
          data: "uint256",
          description: "string",
        },
        key: ["addr"],
      },
    }
  });

在配置文件 ``mud.config.ts`` 中，每一个 ``tables`` 中的键值对都将定义一个表。
键值对的键确定了表的名称，值是一个对象，包含了表的其他配置项，主要包含表字段和主键的定义。

在 Mud 定义的自主世界中，表是一种资源，每个资源都由一个唯一的 ``ResourceId`` 标识。
表的 ``ResourceId`` 被称为 ``tableId``。例子中 ``Users`` 的 ``tableId`` 是
``0x74626d7564646f63000000000000000055736572730000000000000000000000`` 。
其中 ``7462`` 是 ``tb`` 的十六进制形式，`在线转换工具 <https://www.rapidtables.com/convert/number/ascii-to-hex.html>`_ 。
``6d7564646f63`` 代表 ``muddoc``， ``5573657273`` 代表 ``Users`` 。

.. note::

  ``ResourceId`` 是一个底层为 ``bytes32`` 的数据， 由三个固定长度的字符串的字节数组拼接而成。
  第一个字符串，长度为2，表示资源的类型，包括链上表 ``tb`` 、链下表 ``ot`` 、系统 ``sy`` 、命名空间 ``ns`` 。
  第二个字符串，长度为14，表示资源所在的命名空间的名称。
  第三个字符串，长度为16，表示资源的名称。

表的配置项如下：

- ``schema``: ``object`` ，表的字段定义，是字段名和类型的键值对。
- ``key``: ``string[]`` ，表的主键，可以是一个或多个字段的数组。也可以是一个空数组，意味着这是一个单例表。
- ``type``: ``string`` （可选），表的类型。``table`` （默认值，存储在链上的表） 或
  ``offchainTable`` （表的数据只能通过 ``event`` 在链下获取）.
- ``codegen``: ``object`` （可选），3。

  - ``outputDirectory``: ``string``，默认: ``"tables"`` 。代码生成的输出目录，
    默认放在配置文件目录下的 ``src/tables`` 。
  - ``tableIdArgument``: ``boolean``，默认: ``false`` 。是否为读写方法生成 ``tableId`` 参数。
  - ``storeArgument``: ``boolean``，默认: ``false`` 。是否为读写方法生成 ``store`` 参数。

  .. note::

    当同一种表（字段和主键定义相同）存在于多个命名空间，或以不同名字存在于同一个命名空间时，
    可以通过调整 ``tableIdArgument`` ，让自动生成的代码库根据传入的 ``tableId`` 来操作不同的表。

    当这种情形扩展到不同的自主世界时，可以进一步调整 ``storeArgument`` 引入 ``store`` 参数。

  - ``dataStruct``: ``boolean``，当存在超过一个不是主键组成部分的字段时，默认为 ``true`` 。
    是否为表的非主键字段生成数据结构，默认 ``struct <表名>Data`` 。


表字段支持的类型
^^^^^^^^^^^^^^^^^^^^^^

+--------------+-----------------------------------------------------------+
| 类型         |                                                           |
+==============+===========================================================+
|| 数值类型    || ``uint8`` ~ ``uint256``, ``int8`` ~ ``int256``,          |
||             || ``address``, ``bool``, ``bytes1`` ~ ``bytes32``          |
||             || ``enum``                                                 |
+--------------+-----------------------------------------------------------+
| 引用类型     | 数值类型构成的定长数组或动态数组， ``string`` , ``bytes`` |
+--------------+-----------------------------------------------------------+
| 自定义类型   | 数值类型 / 引用类型别名                                   |
+--------------+-----------------------------------------------------------+
| ``mapping``  | ❌                                                        |
+--------------+-----------------------------------------------------------+
| ``string[]`` | ❌                                                        |
+--------------+-----------------------------------------------------------+
| ``bytes[]``  | ❌                                                        |
+--------------+-----------------------------------------------------------+
| ``struct``   | ❌                                                        |
+--------------+-----------------------------------------------------------+


.. important::

  并不是 Mud 框架不能读写 ``mapping``, ``string[]``, ``bytes[]``, ``struct`` 类型的数据，
  而是这些类型的数据不需要以表字段的形式存在。

  如果我们想要实现 ``mapping(uint256 => address)`` 类型，可以创建一个有两个字段的表，
  两个字段类型分别是 ``uint256`` 和 ``address`` ，并将 ``uint256`` 字段设为主键。

  如果我们想要实现 ``string[], bytes[]`` 类型，可以创建一个有两个字段的表，
  两个字段类型分别是 ``uint256`` , ``string`` 或 ``bytes``, 并将 ``uint256`` 字段设为主键， 意为数组的索引。

  每一个单例表中的唯一一行都可以看作一个类型为 ``struct`` 的数据。

表定义的简写
^^^^^^^^^^^^^^^^^^^^^^

为方便定义只有一个字段或无需额外配置的表，可以使用如下的几种简写方式，
其中 ``T*`` 是表定义的简写，相应的 ``Table*`` 是与之等价的完整的表定义。

.. code-block:: ts

  import { defineWorld } from "@latticexyz/world";

  export default defineWorld({
    namespace: "muddoc",
    tables: {
      T1: "address",
      T2: "uint256[]",
      T3: "uint8[10]",
      T4: {
        id: "address",
        value: "uint256",
        data: "string",
      },
      Table1: {
        schema: {
          id: "bytes32",
          value: "address",
        },
        key: ["id"],
      },
      Table2: {
        schema: {
          id: "bytes32",
          value: "uint256[]",
        },
        key: ["id"],
      },
      Table3: {
        schema: {
          id: "bytes32",
          value: "uint8[10]",
        },
        key: ["id"],
      },
      Table4: {
        schema: {
          id: "address",
          value: "uint256",
          data: "string",
        },
        key: ["id"],
      },
    }
  });


表的使用
----------
